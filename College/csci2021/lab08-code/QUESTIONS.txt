                           __________________

                            LAB 08 QUESTIONS
                           __________________


- Name: Bridget Gururaj
- NetID: gnana005

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


Important: Don't Run on Vole
============================

  Vole is a virtualized environment which means measuring the runtime of
  codes will be very unpredictable on it.

  Favor a "real" machine like a physical lab machine, laptop, or a
  remote login to apollo.cselabs.umn.edu.  To run the codes remotely,
  log in via the ssh tool as in

  ,----
  | > ssh kauf0095@apollo.cselabs.umn.edu
  `----

  Use your X.500 username/password to get access. All CSE labs machines
  share the same home directory so you any code you download to Vole or
  a physical lab machine.


Compiling and Timing
====================

  IMPORTANT: Use the provided Makefile to compile as in
  ,----
  | > make
  | gcc -Wall -g -Og -c superscalar_main.c
  | gcc -Wall -g -Og -c superscalar_funcs.c
  | gcc -Wall -g -Og -o superscalar_main superscalar_main.o superscalar_funcs.o
  `----
  The compilation uses `-Og' (debug level optimization) which is
  necessary to stop the compiler from modifying some loops.

  This will produce the `superscalar_main' program which has the
  following usage:
  ,----
  | > ./superscalar_main
  | usage: ./superscalar_main <ALG> <MULT> <EXP>
  |   <MULT> and <ALG> are integers, iterates for MULT * 2^{EXP} iterations
  |   <ALG> is one of
  |           add1_sep : add 1 times in loop
  |           add2_sep : add 2 times in same loop; separate destinations
  |           add3_sep : add 3 times in same loop; separate destinations
  |          add2_same : add 2 times in same loop; same destinations
  |           mul1_sep : multiply 1 times in loop
  |           mul2_sep : multiply 2 times in same loop; separate destinations
  |           mul3_sep : multiply 3 times in same loop; separate destinations
  |          mul2_same : multiply 2 times in same loop; same destinations
  |    add_and_mul_sep : add and multiply in the same loop; separate destinations
  |   add_and_mul_same : add and multiply in the same loop; same destination
  |   add_then_mul_sep : add and multiply in different loops; separate destinations
  |  add_then_mul_same : add and multiply in different loops; same destinations
  `----

  Experiment with algorithm `add1_sep' and parameters `MULT' and `EXP'
  which control the number of iterations run. Experiment until you get a
  run time of about 1 second such as MULT=1 and EXP=30 on apollo.
  ,----
  | apollo> time ./superscalar_main add1_sep 1 30
  | add1_sep for 18 * 2^{27} = 2415919104 iterations... complete
  |
  | real	0m1.071s
  | user	0m1.040s
  | sys	0m0.008s
  `----
time ./superscalar_main add1_sep 3 30
add1_sep for 3 * 2^{30} = 3221225472 iterations... complete

real	0m0.908s
user	0m0.907s
sys	0m0.000s



PROBLEM 1: Addition
===================

(A) add1_sep / add2_sep / add3_sep
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Examine the source code in `superscalar_funcs.c' for the following
  algorithms.
  - add1_sep : add 1 times in loop
  - add2_sep : add 2 times in same loop; separate destinations
  - add3_sep : add 3 times in same loop; separate destinations
  Note that each does some additions in a loop. Time each of these WITH
  THE SAME MULT/EXP parameters and show your timings. Describe how the
  timings compare and speculate on why.

  Note that all of these involve incrementing a counter (`i++') so the
  number of additions is one greater than the algorithm name suggests.

  add1_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m0.908s
  user	0m0.907s
  sys 	0m0.000s

  add2_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m0.818s
  user	0m0.816s
  sys 	0m0.000s

  add3_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m1.242s
  user	0m1.236s
  sys	  0m0.004s

As we go throughout the functions, the operations require the results of the previous lines to progress, which makes it take more time.

(B) add2_sep / add2_same
~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the source code of the two algorithms below.
  - add1_sep : add 1 times in loop
  - add2_sep : add 2 times in same loop; separate destinations
  - add2_same : add 2 times in same loop; same destinations
  Note that the only difference between the add2_X algorithms is that
  the destination for the results.

  Compare timings for these and speculate on the reasons for any
  unexpected results.

  add1_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m0.999s
  user	0m0.998s
  sys  	0m0.000s

  add2_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m0.818s
  user	0m0.817s
  sys	  0m0.000s

  add2_same for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m1.630s
  user	0m1.628s
  sys	  0m0.000s

  the add2_same function takes longer because each operation goes in order. only one register is used and
  this is why you can see it takes double the time




PROBLEM 2: Multiplication
=========================

(A) add1_sep / mul1_sep
~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - add1_sep : add 1 times in loop
  - mul1_sep : multiply 1 times in loop
  Time them on the same parameters and speculate on the timing
  differences.

  add1_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m1.081s
  user	0m1.080s
  sys	  0m0.000s

  mul1_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m2.467s
  user	0m2.465s
  sys	  0m0.000s

Multiplication takes longer because it is just addition repeated multiple times.

(B) mul1_sep / mul2_sep / mul3_sep
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - mul1_sep : multiply 1 times in loop
  - mul2_sep : multiply 2 times in same loop; separate destinations
  - mul3_sep : multiply 3 times in same loop; separate destinations
  Time them on the same parameters and speculate on the timing
  differences.

  mul1_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m2.451s
  user	0m2.446s
  sys	  0m0.004s

  mul2_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m2.456s
  user	0m2.450s
  sys	  0m0.004s

  mul3_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m2.476s
  user	0m2.475s
  sys  	0m0.000s

  these all have similar run times because the operations that are within each funtion do not
  depend on previous funtions to run

(C) mul1_sep / mul2_sep / mul2_same
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - mul1_sep : multiply 1 times in loop
  - mul2_sep : multiply 2 times in same loop; separate destinations
  - mul2_same : multiply 2 times in same loop; same destinations
  Time them on the same parameters and speculate on the timing
  differences.

  mul1_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m2.437s
  user	0m2.436s
  sys 	0m0.000s

  mul2_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m2.439s
  user	0m2.437s
  sys 	0m0.000s

  mul2_same for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m4.905s
  user	0m4.904s
  sys	0m0.000s

mul2_same takes longer, almost double the time, because it updates retA within the functions
which means functions cannot run until it is updated.

PROBLEM 3: Combined Addition/Multiplication
===========================================

(A) add1_then_mul_sep / add2_and_mul_sep
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - add1_then_mul_sep : add and multiply in different loops; separate
    destinations
  - add2_and_mul_sep : add twice and multiply in the same loop; separate
    destinations
  Note that each loop involves incrementing a counter so both of the
  above algorithms should do the same number of operations for N
  iterations:
  ---------------------------------------------
                      loop        total  total
   Algorithm          incr  adds  adds   mults
  ---------------------------------------------
   add1_then_mul_sep  2*N   1*N   3*N    N
   add2_and_mul_sep_  1*N   2*N   3*N    N
  ---------------------------------------------

  Time these algorithms on the same parameters and speculate on the
  timing differences.

  Compare the timings to your earlier results for add1_sep and mul1_sep.

  add1_then_mul_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m3.253s
  user	0m3.251s
  sys 	0m0.000s

  add2_and_mul_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m2.442s
  user	0m2.441s
  sys	0m0.000s

  the one with and means that there can be parallel operations run. the one with then means it has to wait for previous
  operations to run the next, which is why it takes longer to do the same thing

(B) add2_then_mul_sep / add2_and_mul_same
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - add_and_mul_sep : add and multiply in the same loop; separate
    destinations
  - add_and_mul_same : add and multiply in the same loop; same
    destination
  Time them on the same parameters and speculate on the timing
  differences.

  Compare the timings to your earlier results for add1_sep and mul1_sep.

  add2_and_mul_sep for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m2.455s
  user	0m2.453s
  sys 	0m0.000s

  add2_and_mul_same for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m4.078s
  user	0m4.073s
  sys	0m0.004s

the sep one takes less time becuase it is using separate registers to do each operation but the same operation needs to do it all on
one so it takes longer.

  Compare the following two algorithms.
  - add1_then_mul_same : add and multiply in different loops; same
    destinations
  - add2_and_mul_same : add twice and multiply in the same loop; same
    destination
  As before the operation count is the same but in this case the
  destination for adds/multiplies is the same.

  Time these algorithms on the same parameters and speculate on the
  timing differences. Compare to the results from part A where the
  destinations are distinct memory/register locations.

  add1_then_mul_same for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m3.303s
  user	0m3.298s
  sys 	0m0.004s

  add2_and_mul_same for 3 * 2^{30} = 3221225472 iterations... complete

  real	0m4.070s
  user	0m4.065s
  sys 	0m0.004s

the add2_and_mul_same function takes a longer time because it uses the same register to do the operations
