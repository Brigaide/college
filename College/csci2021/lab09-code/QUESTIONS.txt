                           __________________

                            LAB 10 QUESTIONS
                           __________________


- Name: (FILL THIS in)
- NetID: (THE kauf0095 IN kauf0095@umn.edu)

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


PROBLEM 1: Code Overview
========================

(A) Vector and Matrix
~~~~~~~~~~~~~~~~~~~~~

  Examine the header file `matvec.h' which gives type definitions and
  declares functions associated with a simple matrix and vector type.

  For the matrix type `matrix_t' with R rows and C columns, how is a 2D
  matrix actually laid out in memory?

  The matrix has a long of the number of rows, and a long of the number of columns, then the data that is started in each section of row/column.


(B) Getting and Setting Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  For the `matrix_t' and `vector_t' types, convenient means to get and
  set elements is provided. This mechanism is used in the utility
  functions in `matvec_util.c' and defined in `matvec.h'.

  Describe how one would get element (R,C) of `matrix_t' or set it to
  value Z.  Why are these mechanisms not functions?

  To get element (R,C), you would do MGET(mat, R, C) which is ((mat).data[((R)*((mat).cols)) + (C)])
  To set element (R,C) to Z, you would do MSET(maat, i,j,x) ((mat).data[((R)*((mat).cols)) + (C)] = (Z))


PROBLEM 2: Timing Rows vs Columns
=================================

(A) row_sums vs col_sums Timing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compile and run the `matsums_main' executable using the provided
  `Makefile' (typing `make' should suffice).

  Run this program with differing parameters which control the number of
  rows and columns in the matrix which is summed. Show some example runs
  with different parameters including on large square matrix with 8000
  rows and 8000 columns.

  Note any speed differences between the two on large matrices.

  ./matsums_main 1000 1000
        row_sums CPU usage: 2.3900e-03 sec
        col_sums CPU usage: 4.1500e-03 sec

  ./matsums_main 4000 4000
        row_sums CPU usage: 1.0378e-02 sec
        col_sums CPU usage: 1.2753e-01 sec

  ./matsums_main 8000 8000
      row_sums CPU usage: 4.1720e-02 sec
      col_sums CPU usage: 6.2621e-01 sec

The smaller the matrix the less CPU usage it takes. It takes longer to make a matrix that is bigger.
The col_sums also takes longer than the row_sums.

(B) row_sums vs col_sums speed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Examine the source code for the functions `row_sums()' and
  `col_sums()' in the file `matsums_funcs.c'.  Describe why the
  timing/speed differences you observed previously are occurring based
  on features of the source code you see and the layout of the
  `matrix_t' that is being summed.

In row_sums, it goes through the rows first and then the columns, and in the col_sums, it goes through the columns first then the rows.
This is because in row_sums, because of the way that the matrix is made, it can just add from left to right and it is fast. But since it has to go
through the row before it gets to the column, it will just take the column data that it needs and it has to go through the rest of the row before it can jump to the
next row. This means that it will take more time to run. The rows will just go through the matrix for as many rows there are but the cols will go through it each element
in the matrix.

PROBLEM 3: opt_col_sums()
=========================

  Complete the function `opt_col_sums()' in file `matsums_funcs.c'. This
  function should have identical behavior to `col_sums()' (it sums the
  columns of the matrix into a provided array). However, it should be
  *optimized* so that it achieves performance near to that of the
  `row_sums()' function. To achieve this, re-arrange the loops to
  iterate as efficiently as possible with respect to the memory
  system. Feel free to ask course staff for hints on how to do this or
  do some online research.

  To time `opt_col_sums()', uncomment relevant blocks in the
  `matsums_main.c' program that are provided for it.

  Paste your source code and a copy of the timing results of running
  `matsums_main' on an 8000 by 8000 matrix.

  ./matsums_main 8000 8000
      row_sums CPU usage: 4.3421e-02 sec
      col_sums CPU usage: 6.2677e-01 sec
